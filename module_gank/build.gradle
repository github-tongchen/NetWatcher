//boolean isRunAlone = Boolean.parseBoolean((rootProject.properties.get("isGankAlone")))
boolean isRunAlone = rootProject.ext.components.isGankAlone
if (isRunAlone) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//  ARouter配置
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
        //  生成路由文档
        //  路径 : build/generated/source/apt/(debug or release)/com/alibaba/android/arouter/docs/arouter-map-of-${moduleName}.json
        //  arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
    }
}

android {
    compileSdkVersion rootProject.ext.versions.compileSdkVersion
    buildToolsVersion rootProject.ext.versions.buildToolsVersion

    defaultConfig {
        if (isRunAlone) {
            applicationId "com.tongchen.gank"
            multiDexEnabled true
        }
        minSdkVersion rootProject.ext.versions.minSdkVersion
        targetSdkVersion rootProject.ext.versions.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    dataBinding {
        enabled = true
    }

    if (isRunAlone) {
        project.android.sourceSets {
            main {
                manifest.srcFile 'src/runalone/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/runalone/java']
                res.srcDirs = ['src/main/res', 'src/runalone/res']
                assets.srcDirs = ['src/main/assets', 'src/runalone/assets']
                jniLibs.srcDirs = ['src/main/jniLibs', 'src/runalone/jniLibs']
            }
        }
    }

    //  JAVA使用JAVA 8特性
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //  Kotlin使用JAVA 8特性
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            //  移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    if (isRunAlone) {
        //  自定义打包apk名
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "${project.name}_${variant.versionName}_${releaseTime()}_${variant.buildType.name}.apk"
            }
        }
    }
}

androidExtensions {
    //  启用kotlin extension实验性功能
    experimental = true
}

//  获取编译时间
static def releaseTime() {
    return new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:$rootProject.ext.versions.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.versions.extJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.versions.espressoCoreVersion"

    implementation project(path: ':component_service')

    //  ARouter
    kapt "com.alibaba:arouter-compiler:$rootProject.ext.versions.arouterCompilerVersion"
    //  Dagger
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.versions.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.versions.daggerVersion"
}
